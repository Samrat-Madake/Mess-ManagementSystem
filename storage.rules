rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isUser() {
      return isAuthenticated() && 
        firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'user';
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Profile images
    match /profile-images/{userId}/{allImages=**} {
      allow read: if isAuthenticated();
      allow write: if isOwner(userId);
    }

    // Dish images
    match /dish-images/{allImages=**} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Package images
    match /package-images/{allImages=**} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Payment receipts
    match /receipts/{userId}/{allFiles=**} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow create: if isUser() && isOwner(userId);
    }
  }
} 