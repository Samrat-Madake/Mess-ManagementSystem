rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    // Helper function to check if user is user
    function isUser() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'user';
    }

    // Helper function to check if user is owner of the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Validate payment data
    function isValidPayment(data) {
      return data.keys().hasAll([
        'userId', 'userName', 'month', 'amount', 
        'receiptBase64', 'status', 'submittedAt', 'remarks'
      ]) &&
      data.userId is string &&
      data.userName is string &&
      data.month is string &&
      data.amount is number &&
      data.amount > 0 &&
      data.receiptBase64 is string &&
      data.status in ['pending', 'approved', 'rejected'] &&
      data.submittedAt is timestamp;
    }

    // Validate payment update
    function isValidPaymentUpdate(existingData, newData) {
      return (isAdmin() && 
              newData.diff(existingData).affectedKeys()
                .hasOnly(['status', 'remarks', 'updatedAt']));
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated();
      allow update, delete: if isOwner(userId) || isAdmin();
    }
    
    // Dishes collection
    match /dishes/{dishId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Packages collection
    match /packages/{packageId} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }

    // Employees collection
    match /employees/{employeeId} {
      allow read, write: if isAdmin();
    }

    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if isAuthenticated();
      allow create: if isUser();
      allow update, delete: if isOwner(resource.data.userId) || isAdmin();
    }

    // Announcements collection
    match /announcements/{announcementId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin() &&
                   request.resource.data.title is string &&
                   request.resource.data.description is string &&
                   request.resource.data.date is timestamp;
      allow update, delete: if isAdmin();
    }

    // Meal skips collection
    match /mealSkips/{skipId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      allow create: if isUser();
      allow update: if isAdmin();
    }

    // Payments collection
    match /payments/{paymentId} {
      // Read rules
      allow read: if isAuthenticated() && (
        isOwner(resource.data.userId) ||
        isAdmin()
      );

      // Create rules
      allow create: if isUser() && 
        request.resource.data.userId == request.auth.uid &&
        isValidPayment(request.resource.data) &&
        request.resource.data.status == 'pending';

      // Update rules
      allow update: if 
        (isAdmin() && isValidPaymentUpdate(resource.data, request.resource.data)) ||
        (isOwner(resource.data.userId) && false);  // Users can't update their payments

      // Delete rules
      allow delete: if isAdmin();
    }

    // Polls collection
    match /polls/{pollId} {
      allow read: if isAuthenticated();
      allow create: if isAdmin() &&
                request.resource.data.dishes is list &&
                request.resource.data.votes is list &&
                request.resource.data.dishes.size() <= 5 &&
                request.resource.data.votes.size() == request.resource.data.dishes.size() &&
                request.resource.data.status in ['active', 'inactive'] &&
                request.resource.data.createdBy is string &&
                request.resource.data.createdAt is timestamp;
      allow update: if isAdmin() || (
        isAuthenticated() && 
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['votes'])
      );
      allow delete: if isAdmin();
    }

    // Poll votes subcollection
    match /polls/{pollId}/votes/{voteId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() &&
                request.resource.data.userId == request.auth.uid &&
                request.resource.data.dishIndex is number &&
                request.resource.data.dishIndex >= 0 &&
                request.resource.data.createdAt is timestamp;
      allow update: if isAuthenticated() && 
                resource.data.userId == request.auth.uid &&
                request.resource.data.dishIndex is number &&
                request.resource.data.dishIndex >= 0 &&
                request.resource.data.updatedAt is timestamp;
      allow delete: if isAuthenticated() && 
                resource.data.userId == request.auth.uid;
    }

    // Default deny
    match /{document=**} {
      allow read, write: if false;
    }
  }
} 